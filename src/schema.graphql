# query type definition containing 
# 1 an array of users
# 2 an array of experiences
# 3 an array of all cars
# 4 an array of tips from users
# 5 a query of one user
# 6 a query of location from one user
# 7 a query of users personal experiences

type Query {
    users(query: String): [User!]!
    experiences(query:ExperienceQuery): [Experience!]!
    myExperiences(query:String): [Experience!]!
    cars(query: CarQuery): [Car!]!
    tips(query:TipQuery): [Tip!]!
    locations(query:String): [Location!]!
    AnonLocations(query:String): [AnonLocation!]!
    me: User!
    experience(id:ID!): Experience!
    Location(id:ID!): Location!
    AnonLocation(id:ID!): AnonLocation!
}

# mutation type definition containing mutations to 
#create, update and delete exxperiences and always returns experience instance
#create, update and delete cars and always returns car instance
# create, update and delete tips and always returns tip instance
#create, update and delete user and always returns user instance
# create, update and delete location and always returns location instance

type Mutation {
    createUser(data: CreateUserInput!): AuthPayload!
    login(data: LoginUserInput!): AuthPayload!
    deleteUser: User!
    updateUser(data: UpdateUserInput!): User!
    createExperience(data: CreateExperienceInput!): Experience!
    deleteExperience(id: ID!): Experience!
    updateExperience(id: ID!, data: UpdateExperienceInput!): Experience!
    createCar(data: CreateCarInput!): Car!
    deleteCar(id: ID!): Car!
    updateCar(id: ID!, data: UpdateCarInput!): Car!
    createTip(data:CreateTipInput): Tip!
    updateTip(id:ID!, data: UpdateTipInput!): Tip!
    deleteTip(id:ID!): Tip!
    createLocation(data: CreateLocationInput!): Location!
    deleteLocation(id: ID!): Location!
    updateLocation(id: ID!, data: UpdateLocationInput!): Location!
    createAnonLocation(data: CreateAnonLocationInput!): AnonLocation!
    deleteAnonLocation(id: ID!): AnonLocation!
    updateAnonLocation(id: ID!, data: UpdateLocationInput!): AnonLocation!
}

# subscription type to always get live updates
type Subscription {
    experience(postId: ID!): ExperienceSubscriptionPayload!
    myExperience: ExperienceSubscriptionPayload!
    car: CarSubscriptionPayload!
    tip: TipSubscriptionPayload!
    location: LocationSubscriptionPayload!
    AnonLocation: AnonLocationSubscriptionPayload!
}

#type login authentication payload
type AuthPayload {
    token: String!
    user: User!
}

# the create user instance required data
input CreateUserInput {
    name: String!
    email: String!
    password: String!
    secretCode: Int!
}

# the login user instance required data
input LoginUserInput {
    email: String!
    password: String!
}

# the update user instance required data
input UpdateUserInput {
    name: String
    email: String
}
# the create experience instance required data
input CreateExperienceInput {
  location: String! 
  state: String! 
  destination: String!
  description: String!
  time: String
  date: String!
  robbed: Boolean!
  items: String
  car: ID!
 
 
}

# the update experience instance required data

input UpdateExperienceInput {
  location: String
  state: String 
  destination: String
  description: String
  time: String
  date: String
  robbed: Boolean
  items: String
}
# the  experience query required data
input UserQuery{
  name: String
  email: String
}
# the  experience query required data
input ExperienceQuery{
  location: String
  state: String
  destination: String
  description: String
  time: String
  date: String
  robbed: Boolean
  items: String
}
# the  car query required data

input CarQuery{
  color: String
  plateNumber: String
  passengers: Int
  make: String
  description: String
}
# the tip query required data
input TipQuery {
  yourTip: String
  twitterHandle:String
}
# the location query required data
input LocationQuery {
  longitude: String
  latitude:String
}
# the create car instance required data
input CreateCarInput {
   color: String
  plateNumber: String
  passengers: Int
  make: String
  description: String
  # experience: ID
  # author: ID
  
}
# the update car instance required data
input UpdateCarInput {
  color: String
  plateNumber: String
  passengers: Int
  make: String
  description: String
}
# the create tip instance required data
input CreateTipInput {
  yourTip: String
  twitterHandle:String
}
# the update tip instance required data
input UpdateTipInput {
  yourTip: String
  twitterHandle:String
}

# the create location instance required data
input CreateLocationInput {
   latitude: Float!
   longitude: Float!
   author: ID
}
# the update location instance required data
input UpdateLocationInput {
   latitude: Float
   longitude: Float
}
input CreateAnonLocationInput {
   latitude: Float!
   longitude: Float!
}
#user type definition

type User {
    id: ID!
    name: String!
    email: String
    password: String!
    secretCode: Int!
    experiences: [Experience!]!
    cars: [Car!]!
    location: Location
}
# experience type definition
type Experience {
  id: ID! 
  location: String! 
  state: String! 
  destination: String!
  description: String!
  time: String
  date: String!
  robbed: Boolean!
  items: String
  author: User!
  car: Car!
}

# car type definition
type Car {
  id: ID! 
  color: String
  plateNumber: String
  passengers: Int
  make: String
  description: String
  author: User!
  experience: Experience!
}

# tip type definition
type Tip{
  id: ID!
  yourTip: String
  twitterHandle:String
}

#location type definition
type Location {
  id: ID! 
  longitude: Float!
  latitude:  Float!
  author: User!
}

type AnonLocation {
  id: ID! 
  longitude: Float!
  latitude:  Float!
}
enum MutationType {
    CREATED
    UPDATED
    DELETED
}

# experience type subscription payload
type ExperienceSubscriptionPayload {
    mutation: MutationType!
    node: Experience!
}
# car type subscription payload
type CarSubscriptionPayload {
    mutation: MutationType!
    node: Car!
}

# tip type subscription payload
type TipSubscriptionPayload {
    mutation: MutationType!
    node: Tip!
}

# location type subscription payload
type LocationSubscriptionPayload {
    mutation: MutationType!
    node: Location!
}
type AnonLocationSubscriptionPayload {
    mutation: MutationType!
    node: AnonLocation!
}