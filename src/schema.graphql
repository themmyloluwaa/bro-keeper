type Query {
    experiences(query:ExperienceQuery!): [Experience!]!
    cars(query: String): [Car!]!
}

type Mutation {
    createExperience(data: CreateExperienceInput!): Experience!
    deleteExperience(id: ID!): Experience!
    updateExperience(id: ID!, data: UpdateExperienceInput!): Experience!
    createCar(data: CreateCarInput!): Car!
    deleteCar(id: ID!): Car!
    updateCar(id: ID!, data: UpdateCarInput!): Car!
}

type Subscription {
    experience(postId: ID!): ExperienceSubscriptionPayload!
    car: CarSubscriptionPayload!
}

input CreateExperienceInput {
   location: String! 
  state: String! 
  destination: String!
  description: String!
  robbed: Boolean!
  items: String
}

input UpdateExperienceInput {
   location: String! 
  state: String! 
  destination: String!
  description: String!
  robbed: Boolean!
  items: String
}

input ExperienceQuery{
  location: String!
  state: String!
}
input CreateCarInput {
   color: String
  plateNumber: String
  passangers: Int
  make: String
  description: String
  Experience: ID!
}

input UpdateCarInput {
    color: String
  plateNumber: String
  passangers: Int
  make: String
  description: String
}


type Experience {
  id: ID! 
  location: String! 
  state: String! 
  destination: String!
  description: String!
  robbed: Boolean!
  items: String!
  car: Car!
}

type Car {
 id: ID! 
  color: String
  plateNumber: String
  passangers: Int
  make: String
  description: String
  experience: Experience!
}



enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type ExperienceSubscriptionPayload {
    mutation: MutationType!
    data: Experience!
}

type CarSubscriptionPayload {
    mutation: MutationType!
    data: Car!
}